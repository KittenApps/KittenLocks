#import "./UserFragment.graphql"
#import "./SharedLockFragment.graphql"

fragment LockFragment on Lock {
  _id # The lock id
  endDate # The end date
  title # The lock title
  totalDuration # The total duration, since the creation of the lock
  user @type(name: "ChasterUser") { # The user
    ...ChasterUserFragment
  }
  keyholder @type(name: "ChasterUser") { # The keyholder
    ...ChasterUserFragment
  }
  sharedLock @type(name: "SharedLock") {
    ...SharedLockFragment # The shared lock
  }
  isAllowedToViewTime # Whether the wearer is allowed to view the remaining time
  canBeUnlocked # Whether the lock can be unlocked
  canBeUnlockedByMaxLimitDate # Whether the lock can be unlocked because the max limit date has been reached
  isFrozen # Whether the lock is frozen
  role # The user role
  extensions {
    slug # The extension slug. 
    config # The extension configuration.
    _id
    displayName
    summary
    subtitle
    icon
    mode
    regularity
    nbActionsRemaining
    nextActionDate
    isPartner
    textConfig
    createdAt # Created at
    updatedAt # Updated at
    ...on VerificationExtension {
      userData {
        ...VerificationPictureHistoryFragment
      }
    }
    ...on PenaltyExtension {
      userData {
        status
      }
    }
    ...on TemporaryOpeningExtension {
      userData {
        openedAt
      }
    }
    ...on TasksExtension {
      currentTask
      currentTaskVote
      points
      status
      userTasks
      voteEndsAt
      voteStartedAt
    }
  }
  combination # The combination
  availableHomeActions # List of home actions
  reasonsPreventingUnlocking # Reasons preventing unlocking
  extensionsAllowUnlocking # Whether the extensions allow unlocking
  lastVerificationPicture # The last verification picture
  createdAt # Created at
  updatedAt # Updated at
  startDate # The start date
  minDate # The minimum initial date configured at creation
  maxDate # The maximum initial date configured at creation
  maxLimitDate # The maximum date of the lock  After this date, the wearer can release themself regardless of the timer or extension restrictions.
  displayRemainingTime # Whether the remaining time is displayed to the wearer
  limitLockTime # Whether the lock is limited in duration
  status # The status
  deletedAt # Deleted at
  unlockedAt # Unlocked at
  archivedAt # Archived at
  frozenAt # Frozen at
  keyholderArchivedAt # Keyholder archived at
  allowSessionOffer # Whether the lock allows session offers
  isTestLock # Whether the lock is a test lock and counts in the user stats
  offerToken # The offer token
  hideTimeLogs # True if the time information should be hidden from the history
}

fragment VerificationPictureHistoryFragment on VerificationPictureHistory {
  history @type(name: "VerificationPictureHistoryEntry") {
    ...VerificationPictureHistoryEntryFragment
  }
  currentVerificationCode # The current verification code
  verificationCodeRequired # True if the verification code is required in the image
  requestedAt # The request date
}

fragment VerificationPictureHistoryEntryFragment on VerificationPictureHistoryEntry {
  verificationCode # The verification code
  peerVerificationId # The peer verification id
  imageKey @export(as: "imageKey") # The peer verification image key
  submittedAt # Submitted at
  votes # Votes if the peer verification is enabled
  image @rest(path: "/files/{exportVariables.imageKey}", type: "VerificationPictureImage") {
    ...VerificationPictureImageFragment
  }
}

fragment VerificationPictureImageFragment on VerificationPictureImage {
  url
}